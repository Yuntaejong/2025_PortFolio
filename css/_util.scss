@use "sass:math";
@use "sass:string";
@use "sass:map";

// 최소 뷰포트 너비인 경우의 값과 최대 뷰포트 너비인 경우의 값 사이의 값을 계산하여 clamp(최소값, 중간값, 최대값)으로 반환합니다.
// font-size: fluid(10, 20, 320, 1920) => font-size: clamp(10px, (0.625px + 0.625vw), 20px)
@function fluid($min, $max, $minVw: 375, $maxVw: 1920) {
  $var: math.div(math.abs($max - $min), $maxVw - $minVw);

  @if $max > $min {
    $const: $max - $maxVw * $var;
    $in-between: $const + "px + " + ($var * 100) + "vw";

    @return string.unquote(
      "clamp(" + $min + "px, " + $in-between + ", " + $max + "px)"
    );
  } @else {
    $const: $max * -1 - $maxVw * $var;
    $in-between: "(" + $const + "px + " + ($var * 100) + "vw) * -1";

    @return string.unquote(
      "clamp(" + $max + "px, " + $in-between + ", " + $min + "px)"
    );
  }
}

$min-width: 1380 !default;
$max-width: 1920 !default;

// fv = fluid value
// 레이아웃의 최소, 최대값 사이의 값을 가변값으로 적용하기 위하여 사용하며 포토샵에 사용된 값을 그대로 적용합니다.
// font-size: fv(20) => clamp(10px, (0.625px + 0.625vw), 20px)
// @use문으로 util을 불러올 때 $min-width와 $max-width를 설정해야 합니다.
// @use "util" as * with (
//   $min-width: 1380,
//   $max-width: 1920
// );
@function fv($value) {
  $ratio: math.div($min-width, $max-width);

  @return fluid($value * $ratio, $value, $min-width, $max-width);
}

@function unit($value, $unit: "px") {
  @return string.unquote($value + $unit);
}

@function em($value, $base) {
  @return unit(math.div($value, $base), "em");
}

@function rem($value, $base: 16) {
  @return unit(math.div($value, $base), "rem");
}

@function vw($value, $viewport-width) {
  @return unit(math.div($value, $viewport-width) * 100, "vw");
}

@function percent($value, $base) {
  @return math.percentage(math.div($value, $base));
}

@function lh($value, $base) {
  @return math.div($value, $base);
}

// aspect-ratio 지원하지 않는 브라우저 대응을 위해 사용합니다.
// ::before를 사용하여 영역을 확보하므로 이로 인해 발생할 수 있는 이슈들을 충분히 고려하여 사용하세요.
@mixin aspect-ratio($width, $height) {
  $ratio: math.div($width, $height);

  aspect-ratio: $ratio;

  @supports not (aspect-ratio: $ratio) {
    &::before {
      content: "";
      display: block;
      padding-bottom: percent($height, $width);
    }
  }
}

// font-weight names
$thin: 100;
$extra-light: 200;
$light: 300;
$regular: 400;
$medium: 500;
$semi-bold: 600;
$bold: 700;
$extra-bold: 800;
$black: 900;

.visually-hidden:not(:focus) {
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

@mixin fvu($width, $left, $top) {
  position: absolute;
  left: fv($left);
  top: fv($top);
  width: fv($width);
  z-index: 3;
}

@mixin kolon-cttd-tab($tabHeight: 62px, $col: 5, $row: 1) {
  --sticky-height: #{calc($tabHeight * $row)};
  width: 100%;

  &__inner {
    position: static;
    width: 100%;
    height: var(--sticky-height, 0);
    background: #1f1f1f;

    &.isFixed {
      position: fixed;
      left: 0;
      top: 0;
      right: 0;
      z-index: 1000;
    }
  }

  &__list {
    display: flex;
    width: 100%;
    height: 100%;
    margin: 0 auto;
    padding: 0;
  }

  &__item {
    width: calc(100% / $col);
    height: $tabHeight;
    list-style: none;
    padding: 0;
    position: relative;
  }

  &__link {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    position: relative;
    font-weight: 400;
    font-size: 13px;
    color: #fff;
    text-decoration: none;
    opacity: 0.5;
    transition: opacity 0.3s linear;
    z-index: 4;
  }
}

@mixin new-tab($tabHeight: 62px, $col: 5, $row: 1) {
  --sticky-height: #{calc($tabHeight * $row)};
  --sticky-z-index: 90;
  --sticky-top: var(--header-height, 0);
  --sticky-margin-top: 0;

  position: relative;
  display: block;
  width: 100%;
  margin-top: var(--sticky-margin-top, 0);
  min-height: var(--sticky-height, 0);

  &.is-hidden .sticky-tab__container {
    opacity: 0;
  }

  &.is-fixed .sticky-tab__container {
    position: fixed;
    margin-top: var(--sticky-top);
    left: 0;
    width: 100%;
    z-index: var(--sticky-z-index, 10);
    left: 0;
  }

  &__container {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    opacity: 1;
    transition:
      background 0.3s linear,
      opacity 0.3s linear;
    background-color: var(--sticky-bg-color, #fff);
  }

  &__list {
    display: flex;
    @if ($row > 1) {
      flex-wrap: wrap;
    }
    justify-content: space-around;
    align-items: center;
    max-width: var(--sticky-list-width, 100%);
    margin: 0 auto;
    width: 100%;
    z-index: 3;
  }

  &__list li {
    box-sizing: border-box;
    position: relative;
    width: calc(100% / $col);
    height: $tabHeight;

    // &.is-active a {
    //   text-decoration: underline;
    // }

    a {
      position: relative;
      display: block;
      white-space: nowrap;
      height: 100%;
      // font-size: 20px;
      // font-weight: 700;
      // letter-spacing: 0;
      // line-height: 2.25;
      // color: #fff;
      text-decoration: none;

      img {
        display: block;
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate3d(-50%, -50%, 0);
        width: 100%;
        z-index: 2;
      }
    }
  }
}

@mixin coverBg($img) {
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  background-image: url($img);
}
